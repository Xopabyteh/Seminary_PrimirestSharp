@page "/photo"
@using Yearly.MauiClient.Services
@using Yearly.Contracts.Menu
@using Microsoft.AspNetCore.Http
@layout SingleFullPageFlex

<GoBackButton Text='Přidat Fotku'/>

<div class='container mt-400'>
    <div class='photos'>
        <img class='photo__big' src='https://picsum.photos/256/256' />
        <div class='photo__thumbnail'>
            <p class='color-secondary fs-small fw-regular'>Náhledovka</p>
            <img src='https://picsum.photos/256/256' width='108' height='108' />
        </div>
    </div>
    @* <EditForm Model=''> *@  
    <div class='card-holder'>
        @if (todayMenu is not null)
        {
            <InputRadioGroup @bind-Value='selectedFoodId'>
                @foreach (var food in todayMenu!.Foods)
                {
                    <div class='card bg-accent'>
                        <InputRadio Value='food.FoodId'/>
                        <p>@food.Name</p>
                    </div>
                }
            </InputRadioGroup>
        }
    </div>
    <button class='button bg-success'>Poslat</button>
    @* </EditForm> *@
</div>


@code {
    [Inject] private MenuAndOrderCacheService MenuAndOrderCacheService { get; set; } = null!;

    private DailyMenuDTO? todayMenu;
    private bool isLoading = false;

    //Model
    private Guid selectedFoodId;

    protected override async Task OnInitializedAsync()
    {
        //Take photo
        var fileResult = await MediaPicker.Default.CapturePhotoAsync();

        // Get todays daily menu
        // var today = DateTime.Now.Date;
        var today = new DateTime(2024, 1, 3);
        var availableMenus = await MenuAndOrderCacheService.AvailableMenusCachedAsync();

        var todayWeek = availableMenus.FirstOrDefault(m => m.DailyMenus.Any(d => d.Date == today));
        if (todayWeek == default)
        {
            //Todo:
            return;
        }

        todayMenu = todayWeek.DailyMenus.FirstOrDefault(d => d.Date == today);
        if (todayMenu is null)
        {
            //Todo:
            return;
        }

        // Preselect our ordered item
        var orders = await MenuAndOrderCacheService.MyOrdersForWeekCachedAsync(todayWeek.PrimirestMenuId);
        var todayOrder = orders.FirstOrDefault(o => todayMenu.Foods.Any(f => f.FoodId == o.SharpFoodId));

        if (todayOrder is not null)
        {
            selectedFoodId = todayOrder.SharpFoodId;
        }

        StateHasChanged();
    }

}
